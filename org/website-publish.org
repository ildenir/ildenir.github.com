#+TITLE: Geracao estatica website com emacs org-mode
#+DATE: <2017-09-05 Tue>
#+AUTHOR: Ildenir Barbosa
#+EMAIL: ildenir+github@googlemail.com
#+LANGUAGE: pt_BR
#+CREATOR: Emacs 25.2.1 (Org mode 9.0.9)
#+DESCRIPTION: Como este site eh gerado estaticamente com emacs.
#+OPTIONS: num:nil

* Overview

  Este documento descreve o processo de geracao estatica do site baseado no
  modulo org-mode do emacs.

  O script emacs-lisp para configurar projeto do org-mode pode ser gerado
  processando este documento com
  org-mode babel. Basta executar o script
  seguinte com o comando =C-c C-c= com o cursor sobre o bloco.

  #+BEGIN_SRC emacs-lisp :results output silent
  (org-babel-tangle)
  (load-file (concat (file-name-base) ".el"))
  #+END_SRC

  O objetivo site eh ser simples e com pouco conteudo
  dinamico. Basicamente um conjunto de paginas de artigos e breve biografia.

  O projeto do site segue a estrutura de diretorios como mostrado
  abaixo. O diretorio =org= corresponde aos arquivos fontes de paginas
  escritas em org-mode, estilos em css e etc. O diretorio =website= eh
  gerado ao publicar o site. Seu conteudo eh resultado da compilacao dos
  arquivos fonte, e portanto, totalmente descartável.

#+BEGIN_EXAMPLE
../
├── index.html
├── main.js
├── note.org
├── org
│   ├── css
│   │   └── style.css
│   ├── image
│   ├── index.org
│   └── website-publish.org
├── README.md
├── style.css
└── style.css~
#+END_EXAMPLE

** COMMENT questoes
   - por que site estatico?
     github, dropbox, bitbucket ...
     cms : blogspot, wordpress ...
   - por que org-mode e nao html ou markdown?
   - por que emacs?

* Variaveis utilitarias
   Essas variaveis definem a localizacao dos diretorios do projeto.

#+NAME: variaveis-utilitarias
#+BEGIN_SRC emacs-lisp
  (defvar project-dir (expand-file-name (file-name-as-directory "~/ProjectsGitHub/ildenir.github.com/"))
    "Diretorio do projeto do website.")

  (defvar publish-dir (expand-file-name (concat project-dir "website"))
    "Diretorio onde sera publicado o website.")

  (defvar src-dir (expand-file-name (concat project-dir "org"))
    "Diretorio dos arquivos fonte org, imagens, css e ...")
#+END_SRC

* Header e footer do site
   Toda pagina possui uma barra de navegacao e um rodape com referencia
   ao emacs como gerenciador de conteudo, data da ultima atualizacao.

   O conteudo do preambulo e *head* do html foram definidos em
   variaveis separadas para simplificar definicao dos componentes do projeto.

#+NAME: header-footer-site
#+BEGIN_SRC emacs-lisp
  (defvar website-html-preamble "
    <div id=\"mySidenav\" class=\"sidenav\">
      <ul class=\"menu-principal\">
        <li><a href=\"javascript:void(0)\" class=\"closebtn\" onclick=\"closeNav()\">&times;</a>
        <li><a href=\"index.html\"> Home </a></li>
        <li> <a href=\"articles.html\"> Artigos </a></li>
        <li> <a href=\"books.html\"> Livros </a></li>
        <li><a href=\"about.html\"> Sobre </a></li>
      </ul>

      <ul class=\"rede-social\">
        <li><a href=\"http://twitter.com/Uilcoder\"><span class=\"fa fa-twitter\"></span></a></li>
        <li><a href=\"http://github.com/ildenir\"><span class=\"fa fa-github\"></span></a></li>
      </ul>
    </div>

    <header class=\"barra\">
      <div class=\"cabecalho-barra\">
        <span onclick=\"openNav()\" class=\"w3-button\" >
          <span class=\"fa fa-bars\"></span>
        </span>
      </div>
    </header>

    "
    "Cabecalho inserido em toda pagina.")

  (defvar website-html-head "<link rel=\"stylesheet\" href=\"css/style.css\">
    <link rel=\"stylesheet\" href=\"font-awesome-4.7.0/css/font-awesome.css\">
    <script src=\"js/main.js\"></script>"
    "Referencia para estilo css e scripts.")

#+END_SRC

* Conteudo dinamico
   O conteudo da pagina *artigos* eh gerado dinamicamente com base nos
   dados dos outro artigos publicados. A tecnica usada eh equivalente
   a descrita em [jgkamat]. A ideia consiste em criar o arquivo
   =articles.org= com um *source block* elisp dinamico. O source block
   dinamico executa o script lisp contido e substitui o bloco pelo
   resultado do script. O processo de publicacao segue normalmente
   como os outros arquivos =org=. No caso do artigo, o script elisp
   executado serah a funcao ~website-generate-article-list~, que
   produzirah uma lista ~plist~ com titulo, primeiro paragrafo como breve descricao,
   link para primeira imagem se existir e data de publicacao.

#+NAME: conteudo-dinamico
#+BEGIN_SRC emacs-lisp
  (require 'org-element)
  (require 'cl-lib)

  (defun website--extrack-kv (ast)
    "Rotina interna para extrair (key value) da AST."
    (org-element-map ast 'keyword
      (lambda(key) (list
                    (org-element-property :key key)
                    (org-element-property :value key)) )))

  (defun website--extract-link (ast)
    "Rotina interna para extrair link para image da AST."
    (org-element-map ast 'link
      (lambda(lk) (when (string= (org-element-property :type lk) "fuzzy")
                    lk))))

  (defun website-filter-kv (kws filterregexp)
    "Filtra lista KWS com key match padrao FILTERREGEXP."
    (cl-remove-if-not (lambda (el) (string-match filterregexp (car el))) kws))

  (defun website-extract-article-data (filename)
    "Extrai dados do artigo com nome FILENAME.
  Retorna plist keys title image description date"
    (with-temp-buffer
      (insert-file-contents filename)
      (org-mode)
      (let* ((filterregex "\\(TITLE\\|DATE\\|DESCRIPTION\\)")
             (ast (org-element-parse-buffer))
             (kv (website--extrack-kv ast))
             (link (website--extract-link ast))
             (kv-filtered (website-filter-kv kv filterregex))
             kv-plist)
        (setq kv-plist
              (plist-put kv-plist
                         'image (org-element-interpret-data (car link))))
        (dolist (k kv-filtered kv-plist)
          (message (car k))
          (setq kv-plist
                (plist-put kv-plist
                           (intern (downcase (car k))) (car (cdr k))))))))

  (defun website-generate-article ()
    "Gera lista com dados de artigos do projeto.
  A lista retornada possui o formato
  '(filename (title desc link-img pub-date)) onde link-img pode ser nil caso nao
  exista.  Description vai ser extraida de #+DESCRIPTION:"
    (let ((files (directory-files-recursively src-dir "\.org$")))
      (mapcar (lambda (fn) (list fn (website-extract-article-data fn)))
              files)))
#+END_SRC

* Componentes do projeto

#+NAME: componentes-projeto
#+BEGIN_SRC emacs-lisp
      (require 'ox-publish)
      (setq org-publish-project-alist
            `(
              ("org-notes"
               :base-directory ,src-dir
               :base-extension "org"
               :publishing-directory ,publish-dir
               :recursive t
               :publishing-function org-html-publish-to-html
               :headline-levels 4             ; Just the default for this project.
               :auto-preamble t
               :org-html-doctype html5
               :org-html-html5-fancy t
               :exclude "^ *\-.+"
               :html-preamble ,website-html-preamble
               :html-postamble-format ""
               :html-head ,website-html-head
               :auto-sitemap t
               :sitemap-title "Site map"
               :sitemap-filename "site-map.org"
               )
              ("org-static"
               :base-directory ,src-dir
               :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf|otf\\|woff\\|woff2\\|ttf\\|svg"
               :publishing-directory ,publish-dir
               :recursive t
               :publishing-function org-publish-attachment
               )
              ("org" :components ("org-notes" "org-static"))))
#+END_SRC

* Utilitaria de suporte ao fluxo de trabalho
  O fluxo de trabalho consiste em criar/editar os arquivos =org=,
  =css=, =js= e etc com conteudo que pertencera ao site. Ao terminar
  todas as edicoes, basta gerar o site com o comando
  ~org-publish~ para publicar um projeto especifio ou
  ~org-publish-all~ para publicar todos os projetos. Essa opcoes
  tambem estao acessiveis pela combinacao de teclas =C-c C-e P x= ou
  =C-c C-e P a=, respectivamente.

  Ocasionamente, pode-se publicar o website via comando shell
  =website-publish.sh=.

  #+BEGIN_SRC sh :tangle website-publish.sh
    #!/bin/bash
    emacs --batch -l ./org/website-publish.el \
	  --eval="(require 'website-publish)"\
	  --eval="(org-publish-all)"
  #+END_SRC

  Os comando utilizados para publicar o site soh funcionara se quando
  o arquivo =website-publish.el= for carregado. No inicio deste
  documento, tem uma instruncao para carregar. Mas sempre sera
  necessario abrir este documento e executar as intrucoes. Para
  evitar esse trabalho extra, coloque as seguinte intrucao no seu
  arquivo =.emacs=:

  #+BEGIN_SRC emacs-lisp :results output silent
    (add-to-list 'load-path
		 (expand-file-name "~/ProjectsGitHub/ildenir.github.com/org"))
    (require 'website-publish)
  #+END_SRC

  O fluxo tambem suporta a escrita de rascunho. O rascunho consistem
  em um artigo quem nao sera publicado com as instrucoes acima. Para
  criar um rascunho, basta inserir um =- (menos)= no inicio do nome
  do arquivo, como =-Meu Artigo.org=.

  Para facilitar criacao de um artigo, foi criado o um template q eh
  inserido com o comando =<b= no buffer e tecla =TAB=.

* Exporta pacote website-publish
   Agora o script serah finalizado com a exportacao do pacote para emacs.

   #+NAME: exporta-modulo
   #+BEGIN_SRC emacs-lisp
     (provide 'website-publish)
     ;;; website-publish.el ends here

   #+END_SRC

* Codigos

#+BEGIN_SRC emacs-lisp :tangle website-publish.el :noweb yes
  ;;; website-publish.el --- Configuracao publicar site com org-mode

  ;; Copyright (C) 2017 Ildenir Barbosa

  ;; Author: I. C. Barbosa <ildenir+github@googlemail.com>
  ;; Version: 0.0
  ;; Keywords: website
  ;; URL: http://github.com/ildenir/ildenir.github.com

  ;;; Commentary:

  ;; Este pacote configura/customiza o exportador do org-mode para gerar
  ;; o website casa esquilo de pirai.

  ;;; Code:

  <<variaveis-utilitarias>>
  <<header-footer-site>>

  <<conteudo-dinamico>>

  <<componentes-projeto>>



  <<exporta-modulo>>

#+END_SRC


* Referencia
  - [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Publishing Org-mode files to html]]
  - [Dale]    [[http://dale.io/blog/automated-org-publishing.html][Automated Publishing Pipeline with Org Mode]]
  - [Petton]  [[https://nicolas.petton.fr/blog/blogging-with-org-mode.html#org77b6e84][Blogging with org-mode]]
  - [jgkamat] [[https://jgkamat.github.io/blog/website1.html][Creating a blog in Org Mode]]
